<?php
/*
Plugin Name: Custom Short URL
Plugin URI: http://ryanboswell.com
Description: Provides a simple management page for setting a custom short URL to use when generating shortlinks
Version: 1.0
Author: Ryan Boswell
Author URI: http://ryanboswell.com
*/


class RB_Custom_Short_URL {
	
	/*
	 * Class variables
	 */
	var $options_name = 'rb_short_url';
	var $options_defaults = array(
		'base_url' => '',
	);
	var $generic_base_url = '';
	
	/*
	 * Class Constructor, initialize action and filter handlers, and set default values for class vars
	 *
	 * @uses add_action
	 * @return null
	 */
	public function __construct() {
		// register action handlers
		add_action( 'admin_init', array( $this, 'action_admin_init' ) );
		add_action( 'admin_menu', array( $this, 'action_admin_menu' ) );
		
		// register filter handlers
		add_filter( 'get_shortlink', array( $this, 'filter_get_shortlink' ), 99, 1 );
		
		// set default values for class variables
		$this->generic_base_url = parse_url( network_home_url() );
		$this->generic_base_url = $this->generic_base_url['host'];
	}
	
	
	/*
	 * Register setting
	 * @uses register_setting
	 * @action admin_init
	 * @return null
	 */
	function action_admin_init() {
		register_setting( $this->options_name, $this->options_name, array( $this, 'sanitize_options' ) );
	}
	
	
	/*
	 * Register custom Tools page & menu item
	 *
	 * @uses add_management_page
	 * @action admin_menu
	 * @return null
	 */
	function action_admin_menu() {
		add_management_page( 'URL Shortener', 'URL Shortener', 'manage_options', $this->options_name, array( $this, 'screen_options' ) );
	}
	
	
	/*
	 * Display the custom Tools page for managing the URL shortener options
	 *
	 * @uses get_option, network_home_url, settings_fields, esc_url
	 * @return null
	 */
	function screen_options() {
		$options = get_option( $this->options_name, $this->options_defaults );
		
	?>
		<div class="wrap">
			<h2>Custom URL Shortener Options</h2>
			
			<?php if( isset( $_GET['settings-updated'] ) && ( $_GET['settings-updated'] == 'true' ) ) { ?>
				<div id="message" class="updated"> 
					<p><strong>Settings saved.</strong></p>
				</div>
			<?php } ?>
			
			<p>The goal of this custom URL shortener is to provide even shorter short links to your site's pages. The setup of a URL shortener typically requires you to register your own domain name (something like goo.gl) and configure it to redirect to your primary domain (<?php echo esc_html( $this->generic_base_url ); ?>). There are other ways to accomplish this, but that's the easiest and best way to use this URL shortener plugin.</p>
			<p>After setting the base URL below, any shortlinks generated by WordPress will use this rather than your primary domain.</p>
			
			<form action="options.php" method="post">
				<?php settings_fields( $this->options_name ); ?>
				<table class="form-table">
					<tr>
						<th scope="row"><label for="base_url">Base URL:</label></th>
						<td><input type="text" id="base_url" value="<?php echo esc_url( $options[ 'base_url' ] ); ?>" name="<?php echo $this->options_name; ?>[base_url]" /></td>
						<td><span class="description">Replace '<strong>http://<?php echo esc_html( $this->generic_base_url ); ?></strong>' with this when generating short urls.</span></td>
					</tr>
				</table>
				<p><input type="submit" value="Save Changes" class="button-primary" /></p>
			</form>
		</div>
	<?php
	}
	
	
	/*
	 * Sanitize options
	 * @param array $options
	 * @uses esc_url_raw
	 * @return array
	 */
	function sanitize_options( $options ) {
		$options_sanitized = array();
		
		foreach( $options as $key => $value ) {
			switch( $key ) {
				case 'base_url':
					$options_sanitized[ $key ] = esc_url_raw( $value );
				break;
			}
		}
		
		return $options_sanitized;
	}
	
	
	/*
	 * Filter the shortlink to replace the default home URL with the custom URL
	 * @param array $options
	 * @uses esc_url_raw
	 * @return array
	 */
	function filter_get_shortlink( $shortlink = '' ) {
		$options = get_option( $this->options_name, $this->options_defaults );
		
		if( isset( $options['base_url'] ) && !empty( $options['base_url'] ) && !empty( $shortlink ) ) {
			// only proceed if there is a custom URL set and there is already a shortlink to filter
			
			// parse the custom URL down to just the host
			$base_url = parse_url( esc_url( $options['base_url'] ) );
			$base_url = $base_url['host'];
			
			// replace the generic site host with the custom URL host
			$shortlink = str_replace( $this->generic_base_url, $base_url, $shortlink );
		}
		
		return $shortlink;
	}
	
	
	/*
	 * Handles cleanup of any saved settings for the plugin so we're good neighbors
	 * @action register_deactivation_hook
	 * @uses delete_option, unregister_setting
	 * @return null
	 */
	function on_deactivation() {
		// delete the options
		delete_option( 'rb_short_url' );
		
		// unregister the setting
		unregister_setting( 'rb_short_url', 'rb_short_url', array( RB_Custom_Short_URL, 'sanitize_options' ) );
	}
	
}

/*
 * Initiate the class so it can be constructed
 */
new RB_Custom_Short_URL;


/*
 * Register the plugin's deactivation handler
 */
register_deactivation_hook( __FILE__, array( 'RB_Custom_Short_URL', 'on_deactivation' ) );

?>

